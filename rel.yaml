esphome:
    name: testhost
host:
logger:
api:
#^^^^^^^^^^^^^^^^^^^^^^^^ Remove and replace with autogen from esphome

switch:              #Insert Things here
  - platform: homeassistant
    id: light_ha
    entity_id: light.wiz
    internal: true
  - platform: template
    internal: false
    id: Screen_on      #Keep the screen on
    turn_on_action:
        - display.page.show: timemenu
        
sensor:
  - platform: homeassistant
    id: inside_temperature
    entity_id: REPLACEME
    internal: true

text_sensor:
  - platform: homeassistant
    entity_id: time.budzik #replace
    name: "Alarm time"
    id: alarm_state
    internal: true
    
button:
  - platform: restart
    id: restart_but       
    internal: false   #Set to false disable restart button in HA      

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Things from ha to adjust

script:  #Turns off screen after an interval, resets the timer every time it's called
  - id: oledoff_timer
    mode: restart
    then:
      - logger.log: "Timer fired!"
      - delay: 15s
      - if:
            condition:
                  switch.is_off: Screen_on
            then:
                - display.page.show: blank
            else:
                - display.page.show: timemenu  
      

font:
  - file: "gfonts://Silkscreen"
    id: small_font
    size: 10
  - file: "gfonts://Roboto"
    id: large_font
    size: 24
    
time:
  - platform: homeassistant
    id: esptime

# Display and Pages blank,timemenu ADJUST FOR PROD
display:
  - platform: sdl
    id: oled_display
    dimensions:
      width: 128
      height: 64
    update_interval: 100ms
    pages:
      - id: timemenu # from example see: https://esphome.io/cookbook/display_time_temp_oled/
        lambda: |-
      // Print time until alarm in top center
      it.printf(64, 0, id(small_font), TextAlign::TOP_CENTER, "Alarm State: %s", id(alarm_state).state.c_str());
      
      // Print time in HH:MM format
      it.strftime(0, 60, id(large_font), TextAlign::BASELINE_LEFT, "%H:%M", id(esptime).now());

      // Print inside temperature (from homeassistant sensor)
      if (id(inside_temperature).has_state()) {
        it.printf(127, 23, id(small_font), TextAlign::TOP_RIGHT , "%.1f", id(inside_temperature).state);
      }

      // Print outside temperature (from homeassistant weather)
      if (id(outside_temperature).has_state()) {
        it.printf(127, 60, id(medium), TextAlign::BASELINE_RIGHT , "%.1f%s",
                  id(outside_temperature).state, id(outside_temperature_unit).state.c_str());
      }
      - id: blank
        lambda: |-
          it.print(0, 10, id(small_font), "");
    
      
# GUI menu entry FILL FOR PROD
graphical_display_menu:
  id: menu
  display: oled_display
  on_redraw:
    then:
      component.update: oled_display
  active: false
  mode: rotary
  font: small_font
  items:                   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Menu items to adjust
    - type: back
      text: 'Back'
      
    - type: switch
      immediate_edit: true
      text: 'Swiat?o'
      on_text: 'Bright'
      off_text: 'Dark'
      switch: light_ha
      
    - type: label
      text: !lambda |-
        return "REPLACE";
        
    - type: command
      text: 'Czas'
      on_value:
         then:
           - display.page.show: timemenu
           
    - type: command
      text: 'U?pij'
      on_value:
         then:
           - display.page.show: blank
           
    - type: command
      text: '!Restart!'
      on_value:
         then:
           - button.press: restart_but

# Input keys CHANGE FOR PRODUCTION
binary_sensor:
  - platform: sdl
    id: key_up
    key: SDLK_a
    on_press:
      then:
        - script.execute: oledoff_timer
        - if:
            condition:
                or:
                - display.is_displaying_page: blank
                - display.is_displaying_page: timemenu                
            then:
              - display_menu.show: menu
            else:
              - display_menu.up: menu

  - platform: sdl
    id: key_down
    key: SDLK_s
    on_press:
      then:
        - script.execute: oledoff_timer
        - if:
            condition:
                or:
                - display.is_displaying_page: blank
                - display.is_displaying_page: timemenu                
            then:
              - display_menu.show: menu
            else:
              - display_menu.down: menu

  - platform: sdl
    id: key_left
    key: SDLK_d
    on_press:
      then:
      - display_menu.show: menu
  - platform: sdl
    id: key_right
    key: SDLK_f
    on_press:
      then:
        - script.execute: oledoff_timer
        - if:
            condition:
                or:
                - display.is_displaying_page: blank
                - display.is_displaying_page: timemenu                
            then:
              - display_menu.show: menu
            else:
              - display_menu.enter: menu
