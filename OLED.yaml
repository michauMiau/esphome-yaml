esphome:
    name: testhost
host:

logger: #0 bauds

api:
#^^^^^^^^^^^^^^^^^^^^^^^^ Remove and replace with autogen from esphome
# Here are the things you need to adjust for ha
esphome:
  name: esp-c3mini
  friendly_name: control_thingy
  on_boot: 
    then:
      - script.execute: oledoff_timer  
      
ota:
  - platform: esphome
    password: "fe1440059f837ccd0a04e4917c23f8e8"
    on_begin: 
      then:
        - display.page.show: ota_in_progress
        - script.stop: oledoff_timer


logger:
  baud_rate: 0

switch:             
  - platform: homeassistant
    id: light_ha
    entity_id: light.wiz_rgbww_tunable_ad1dee
    internal: true
    
  - platform: template
    name: Screen on
    id: Screen_on      #Keep the screen on
    turn_on_action:
        - display.page.show: timemenu
        
sensor:
  - platform: homeassistant
    id: weather_temperature
    attribute: temperature
    entity_id: weather.forecast_dom
    internal: true
  - platform: homeassistant
    id: inside_temperature
    entity_id: sensor.oled_control_living_room_temperature
    internal: true
    #more here
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 5min
    entity_category: "diagnostic"
    
text_sensor:
  - platform: homeassistant
    entity_id: input_datetime.budzik 
    id: alarm_state
    internal: true
  - platform: homeassistant
    id: weather_temperature_unit
    entity_id: weather.forecast_dom
    attribute: temperature_unit
    internal: true
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: ip_addr
      update_interval: 5min
    ssid:
      name: ESP Connected SSID
      id: esp_ssid
      update_interval: 5min

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Things from ha to adjust

script:  #Turns off screen after an interval, resets the timer every time it's called
  - id: oledoff_timer
    mode: restart
    then:
      - logger.log: "Timer fired!"
      - delay: 15s
      - if:
            condition:
                  switch.is_off: Screen_on
            then:
                - display.page.show: blank
                - switch.turn_off: Screen_on
            else:
                - display.page.show: timemenu  
      

font:
  - file: "gfonts://Google+Sans+Code"
    id: small_font
    size: 12
    extras:
      - file: "gfonts://Google+Sans+Code"
        glyphs: [ł,ś,Ł,←,ą] #if you are using a foreign language or special characters, you have to add them here
  - file: "gfonts://BBH+Sans+Bogle"
    id: large_font
    size: 34
    
time:
  - platform: homeassistant
    id: esptime

i2c: # Replace with spi if using it
 - id: bus_oled
   sda: GPIO8
   scl: GPIO9
#   scan: True
# Display and Pages
display:
  - platform: ssd1306_i2c
    i2c_id: bus_oled
    model: "SSD1306 128x64"
    address: 0x3C
    flip_y: false #set to true if screen not inverted
    flip_x: false #set to ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    id: oled_display
    update_interval: 50ms
    pages:
     - id: timemenu
       lambda: |-
        // --- Alarm time display and countdown ---
        if (id(alarm_state).state.empty()) {
          it.printf(64, 0, id(small_font), TextAlign::TOP_CENTER, "Alarm: None");
        } else {
          auto now = id(esptime).now();
          if (!now.is_valid()) {
            it.printf(64, 0, id(small_font), TextAlign::TOP_CENTER, "Alarm:--:--");
          } else {
            // Parse HH:MM from the alarm_state text
            int alarm_hour = 0, alarm_min = 0;
            sscanf(id(alarm_state).state.c_str(), "%d:%d", &alarm_hour, &alarm_min);

            // Convert both times to minutes since midnight
            int current_minutes = now.hour * 60 + now.minute;
            int alarm_minutes = alarm_hour * 60 + alarm_min;

            // Handle next-day alarms
            if (alarm_minutes <= current_minutes) {
              alarm_minutes += 24 * 60;
            }

            // Calculate time difference
            int diff = alarm_minutes - current_minutes;
            int hours = diff / 60;
            int minutes = diff % 60;

            // Print alarm time and time until alarm
            char buf[64];
            sprintf(buf, "%02d:%02d w %dh %02dm", alarm_hour, alarm_min, hours, minutes);
            it.printf(64, 0, id(small_font), TextAlign::TOP_CENTER, "%s", buf);
          }
        }

        // --- Current time ---
        it.strftime(0, 60, id(large_font), TextAlign::BASELINE_LEFT, "%H:%M", id(esptime).now());

        // --- Inside temperature ---
        if (id(inside_temperature).has_state()) {
          it.printf(127, 23, id(small_font), TextAlign::TOP_RIGHT , "%.1f°", id(inside_temperature).state);
        }

        // --- Outside temperature ---
        if (id(weather_temperature).has_state()) {
          it.printf(127, 60, id(small_font), TextAlign::BASELINE_RIGHT , "%.1f%s",
                    id(weather_temperature).state, id(weather_temperature_unit).state.c_str());
        }


     - id: blank
       lambda: |-
          it.print(0, 10, id(small_font), "");
     - id: ota_in_progress
       lambda: |-
          it.print(0, 60, id(small_font), TextAlign::BASELINE_LEFT, "OTA Update in progress");
      
# GUI menu entry FILL FOR PROD
graphical_display_menu:
- id: menu
  display: oled_display
  on_redraw:
    then:
      component.update: oled_display
  active: false
  mode: rotary
  font: small_font
  items:    
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Menu items to adjust
    - type: command
      text: !lambda |-
        char buffer[6];
        auto time = id(esptime).now();
        if (time.is_valid()) {
          time.strftime(buffer, sizeof(buffer), "%H:%M");
          return std::string(buffer);
        } else {
          return std::string("Time unavail-");
        }
      on_value:
         then:
           - display.page.show: timemenu

    - type: command
      text: "Zasłony"
      on_value:
       then:
           - homeassistant.action:
              action: cover.toggle
              data:
                entity_id: cover.pico_zaslony

           
    - type: switch
      immediate_edit: true
      text: 'Swiatło'
      on_text: 'WŁ'
      off_text: 'WYŁ'
      switch: light_ha
           
    - type: command
      text: 'Uśpij'
      on_value:
         then:
           - display.page.show: blank

    - type: menu
      text: 'Budzik'
      on_enter:
        then:
          lambda: 'ESP_LOGI("display_menu", "enter: %s", it->get_text().c_str());'
      on_leave:
        then:
          lambda: 'ESP_LOGI("display_menu", "leave: %s", it->get_text().c_str());'
      items:
        - type: back
          text: !lambda |-
            return "← Alarm: " + id(alarm_state).state;
        - type: command
          text: 'Ustaw na 6:30'
          on_value:
            then:
             - homeassistant.service:
                service: input_datetime.set_datetime
                data:
                  entity_id: input_datetime.budzik
                  time: "06:30:00"
        - type: command
          text: 'Ustaw na 5:30'
          on_value:
            then:
             - homeassistant.service:
                service: input_datetime.set_datetime
                data:
                  entity_id: input_datetime.budzik
                  time: "05:30:00"
        - type: command
          text: 'Wyłącz 0:0'
          on_value:
            then:
             - homeassistant.service:
                service: input_datetime.set_datetime
                data:
                  entity_id: input_datetime.budzik
                  time: "00:00:00"                  
        - type: command
          text: 'Ustaw na 9:00'
          on_value:
            then:
             - homeassistant.service:
                service: input_datetime.set_datetime
                data:
                  entity_id: input_datetime.budzik
                  time: "09:00:00"
    - type: menu
      text: 'Ustawienia'
      on_enter:
        then:
          lambda: 'ESP_LOGI("display_menu", "enter: %s", it->get_text().c_str());'
      on_leave:
        then:
          lambda: 'ESP_LOGI("display_menu", "leave: %s", it->get_text().c_str());'
      items:
        - type: back
          text: '←'
                 
        - type: label
          text: !lambda |-
            return "WiFi: " + to_string(id(wifi_signal_db).state) + " dBm";
        - type: label
          text: !lambda |-
            return "SSID: " + id(esp_ssid).state;            
        - type: label
          text: !lambda |-
            return "IP: " + id(ip_addr).state;
        - type: command
          text: '!Restart!'
          on_value:
             then:
               - button.press: but_restart
# Input keys CHANGE FOR PRODUCTION
binary_sensor:
  - platform: gpio   #UP
    id: key_up
#    name: up
    pin:
      number: GPIO2
      mode:
        input: true
        pullup: true
      inverted: True
    on_press:
      then:
        - script.execute: oledoff_timer
        - if:
            condition:
                or:
                - display.is_displaying_page: blank
                - display.is_displaying_page: timemenu                
            then:
              - display_menu.show: menu
            else:
              - display_menu.up: menu

  - platform: gpio #DOWN
    id: key_down
#    name: DOWN
    pin:
      number: GPIO1
      mode:
        input: true
        pullup: true
      inverted: True
    on_press:
      then:
        - script.execute: oledoff_timer
        - if:
            condition:
                or:
                - display.is_displaying_page: blank
                - display.is_displaying_page: timemenu                
            then:
              - display_menu.show: menu
            else:
              - display_menu.down: menu
            
  - platform: gpio #Enter
    id: key_right
    pin:
      number: GPIO3
      mode:
        input: true
        pullup: true
      inverted: True
    on_press:
      then:
        - script.execute: oledoff_timer
        - if:
            condition:
                or:
                - display.is_displaying_page: blank
                - display.is_displaying_page: timemenu                
            then:
              - display_menu.show: menu
            else:
              - display_menu.enter: menu
              

     #Special button that cycles beetwen timemenu and screen off
  - platform: gpio
    id: key_cycle
    pin:
      number: GPIO4
      mode:
        input: true
        pullup: true
      inverted: true
    on_press:
      then:

        - script.execute: oledoff_timer
        - if:
            condition:
              or:
#                - display_menu.is_active: menu
                - not:
                    display.is_displaying_page: timemenu
            then:
              - display_menu.show_main: menu
              - display.page.show: timemenu
            else:
              - display.page.show: blank


button: # Buttons for HA

  - platform: restart
    id: but_restart
    name: Restart
    internal: false   #Set to true to disable restart button in HA     

  - platform: template
    name: UP Key
    id: but_up
    on_press:
      then:
        - script.execute: oledoff_timer
        - if:
            condition:
                or:
                - display.is_displaying_page: blank
                - display.is_displaying_page: timemenu                
            then:
              - display_menu.show: menu
            else:
              - display_menu.up: menu



  - platform: template
    name: Down Key
    id: but_down
    on_press:
      then:
        - script.execute: oledoff_timer
        - if:
            condition:
                or:
                - display.is_displaying_page: blank
                - display.is_displaying_page: timemenu                
            then:
              - display_menu.show: menu
            else:
              - display_menu.down: menu
              
  - platform: template
    name: Enter Key
    id: but_Enter
    on_press:
      then:
        - script.execute: oledoff_timer
        - if:
            condition:
                or:
                - display.is_displaying_page: blank
                - display.is_displaying_page: timemenu                
            then:
              - display_menu.show: menu
            else:
              - display_menu.enter: menu
