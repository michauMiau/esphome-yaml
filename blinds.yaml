api:
  encryption:
    key: !secret ha_api
  reboot_timeout: 0s


ota:
  - platform: esphome
    password: !secret pico_ota
    on_begin: 
      then: 
        cover.open:  my_blind
update: 

  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  #power_save_mode: none
#  fast_connect: true
  reboot_timeout: 0s



binary_sensor:
  # Główny przycisk (z blokadą bounce)
  - platform: gpio
    pin:
      number: 21
      mode: INPUT_PULLUP 
      inverted: true
    name: Przycisk 1
    filters:
      - delayed_on: 40ms
      - delayed_off: 40ms

  #- platform: status # for status monitoring
  #  name: "Pico Blind Status"
  #  id: pico_blind_status

            

  - platform: gpio
    pin:
      number: 2
      mode: INPUT_PULLUP
      inverted: False
    name: "Przycisk 2"
    filters:
      - delayed_on: 100ms       
      - delayed_off: 100ms     


      


  - platform: gpio
    pin:
      number: 19
      mode: INPUT_PULLUP
      inverted: false
    name: Czujnik Okna
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms

  - platform: gpio
    pin:
      number: 20
      mode: INPUT_PULLUP
      inverted: true
    name: Czujnik Drzwi
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms


substitutions:
  open_pos: "0"         
  closed_pos: "79000"  #change for yourself

cover:
  - platform: template
    name: "Zasłony"
    id: my_blind
    device_class: shade
    has_position: true
    optimistic: true
    assumed_state: true

    position_action:
      - stepper.set_target:
          id: my_stepper
          target: !lambda 'return ${closed_pos} + (int((${open_pos} - ${closed_pos}) * pos));'
      - sensor.template.publish:
          id: position
          state: !lambda 'return id(my_stepper).current_position;'

    open_action:
      - stepper.set_target:
          id: my_stepper
          target: ${open_pos}
      - sensor.template.publish:
          id: position
          state: !lambda 'return id(my_stepper).current_position;'

    close_action:
      - stepper.set_target:
          id: my_stepper
          target: ${closed_pos}
      - sensor.template.publish:
          id: position
          state: !lambda 'return id(my_stepper).current_position;'

    stop_action:
      - stepper.set_target:
          id: my_stepper
          target: !lambda 'return id(my_stepper).current_position;'
      - sensor.template.publish:
          id: position
          state: !lambda 'return id(my_stepper).current_position;'



stepper:
  - platform: uln2003
    id: my_stepper
    pin_a: GPIO10
    pin_b: GPIO12
    pin_c: GPIO11
    pin_d: GPIO13
    max_speed: 250
    acceleration: 100
    deceleration: 100
    sleep_when_done: true

switch:
  - platform: template
    name: "Stepper Test bigg"
    turn_on_action:
      - stepper.report_position:
          id: my_stepper
          position: 0   # reset to 0 so we always step forward
      - stepper.set_target:
          id: my_stepper
          target: -9000  # move 50 steps forward

  - platform: template
    name: "Stepper Test Backward"
    turn_on_action:
      - stepper.report_position:
          id: my_stepper
          position: 0   # reset to 0 so we always step backward
      - stepper.set_target:
          id: my_stepper
          target: -900   # move 50 steps backward
          
  - platform: template
    name: "Reset do 0"
    turn_on_action:
      - stepper.report_position:
          id: my_stepper
          position: 0   # reset to 0
      - stepper.set_target:
          id: my_stepper
          target: 0 #needed or moves to 0 


sensor:
  - platform: template
    name: "Zasłony pozycja"
    id: position
    update_interval: 7s  #How often reports the position to home assistant
    lambda: |-
      return id(my_stepper).current_position;

